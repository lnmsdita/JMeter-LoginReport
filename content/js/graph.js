/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1073.0, "minX": 0.0, "maxY": 10989.0, "series": [{"data": [[0.0, 1073.0], [0.1, 1309.0], [0.2, 1347.0], [0.3, 1347.0], [0.4, 1349.0], [0.5, 1351.0], [0.6, 1385.0], [0.7, 1395.0], [0.8, 1406.0], [0.9, 1407.0], [1.0, 1409.0], [1.1, 1438.0], [1.2, 1461.0], [1.3, 1473.0], [1.4, 1473.0], [1.5, 1486.0], [1.6, 1488.0], [1.7, 1508.0], [1.8, 1515.0], [1.9, 1522.0], [2.0, 1553.0], [2.1, 1560.0], [2.2, 1563.0], [2.3, 1565.0], [2.4, 1581.0], [2.5, 1586.0], [2.6, 1589.0], [2.7, 1591.0], [2.8, 1605.0], [2.9, 1612.0], [3.0, 1622.0], [3.1, 1671.0], [3.2, 1680.0], [3.3, 1681.0], [3.4, 1686.0], [3.5, 1690.0], [3.6, 1726.0], [3.7, 1734.0], [3.8, 1743.0], [3.9, 1750.0], [4.0, 1755.0], [4.1, 1756.0], [4.2, 1781.0], [4.3, 1795.0], [4.4, 1837.0], [4.5, 1843.0], [4.6, 1853.0], [4.7, 1860.0], [4.8, 1870.0], [4.9, 1871.0], [5.0, 1874.0], [5.1, 1891.0], [5.2, 1910.0], [5.3, 1911.0], [5.4, 1912.0], [5.5, 1935.0], [5.6, 1938.0], [5.7, 1957.0], [5.8, 1961.0], [5.9, 1974.0], [6.0, 1980.0], [6.1, 1982.0], [6.2, 1989.0], [6.3, 2000.0], [6.4, 2000.0], [6.5, 2000.0], [6.6, 2010.0], [6.7, 2021.0], [6.8, 2023.0], [6.9, 2024.0], [7.0, 2026.0], [7.1, 2047.0], [7.2, 2052.0], [7.3, 2053.0], [7.4, 2057.0], [7.5, 2058.0], [7.6, 2065.0], [7.7, 2078.0], [7.8, 2078.0], [7.9, 2082.0], [8.0, 2082.0], [8.1, 2084.0], [8.2, 2089.0], [8.3, 2096.0], [8.4, 2098.0], [8.5, 2099.0], [8.6, 2104.0], [8.7, 2116.0], [8.8, 2120.0], [8.9, 2130.0], [9.0, 2131.0], [9.1, 2132.0], [9.2, 2152.0], [9.3, 2155.0], [9.4, 2160.0], [9.5, 2162.0], [9.6, 2164.0], [9.7, 2166.0], [9.8, 2172.0], [9.9, 2173.0], [10.0, 2176.0], [10.1, 2177.0], [10.2, 2180.0], [10.3, 2188.0], [10.4, 2190.0], [10.5, 2190.0], [10.6, 2190.0], [10.7, 2192.0], [10.8, 2198.0], [10.9, 2203.0], [11.0, 2215.0], [11.1, 2223.0], [11.2, 2224.0], [11.3, 2224.0], [11.4, 2227.0], [11.5, 2230.0], [11.6, 2237.0], [11.7, 2237.0], [11.8, 2238.0], [11.9, 2240.0], [12.0, 2241.0], [12.1, 2242.0], [12.2, 2248.0], [12.3, 2256.0], [12.4, 2260.0], [12.5, 2269.0], [12.6, 2274.0], [12.7, 2275.0], [12.8, 2276.0], [12.9, 2286.0], [13.0, 2287.0], [13.1, 2287.0], [13.2, 2310.0], [13.3, 2316.0], [13.4, 2318.0], [13.5, 2320.0], [13.6, 2351.0], [13.7, 2387.0], [13.8, 2405.0], [13.9, 2409.0], [14.0, 2413.0], [14.1, 2414.0], [14.2, 2427.0], [14.3, 2428.0], [14.4, 2437.0], [14.5, 2446.0], [14.6, 2448.0], [14.7, 2458.0], [14.8, 2466.0], [14.9, 2468.0], [15.0, 2482.0], [15.1, 2491.0], [15.2, 2495.0], [15.3, 2508.0], [15.4, 2519.0], [15.5, 2522.0], [15.6, 2531.0], [15.7, 2536.0], [15.8, 2537.0], [15.9, 2554.0], [16.0, 2569.0], [16.1, 2584.0], [16.2, 2598.0], [16.3, 2606.0], [16.4, 2619.0], [16.5, 2680.0], [16.6, 2694.0], [16.7, 2709.0], [16.8, 2734.0], [16.9, 2747.0], [17.0, 2747.0], [17.1, 2748.0], [17.2, 2760.0], [17.3, 2761.0], [17.4, 2769.0], [17.5, 2773.0], [17.6, 2774.0], [17.7, 2795.0], [17.8, 2796.0], [17.9, 2816.0], [18.0, 2821.0], [18.1, 2829.0], [18.2, 2829.0], [18.3, 2834.0], [18.4, 2835.0], [18.5, 2835.0], [18.6, 2859.0], [18.7, 2863.0], [18.8, 2875.0], [18.9, 2880.0], [19.0, 2884.0], [19.1, 2926.0], [19.2, 2933.0], [19.3, 2964.0], [19.4, 2985.0], [19.5, 3018.0], [19.6, 3042.0], [19.7, 3042.0], [19.8, 3050.0], [19.9, 3050.0], [20.0, 3056.0], [20.1, 3059.0], [20.2, 3071.0], [20.3, 3072.0], [20.4, 3075.0], [20.5, 3094.0], [20.6, 3096.0], [20.7, 3109.0], [20.8, 3114.0], [20.9, 3114.0], [21.0, 3114.0], [21.1, 3118.0], [21.2, 3132.0], [21.3, 3144.0], [21.4, 3150.0], [21.5, 3153.0], [21.6, 3158.0], [21.7, 3163.0], [21.8, 3176.0], [21.9, 3205.0], [22.0, 3206.0], [22.1, 3206.0], [22.2, 3217.0], [22.3, 3218.0], [22.4, 3224.0], [22.5, 3247.0], [22.6, 3250.0], [22.7, 3275.0], [22.8, 3291.0], [22.9, 3297.0], [23.0, 3311.0], [23.1, 3321.0], [23.2, 3324.0], [23.3, 3325.0], [23.4, 3331.0], [23.5, 3338.0], [23.6, 3339.0], [23.7, 3360.0], [23.8, 3400.0], [23.9, 3408.0], [24.0, 3426.0], [24.1, 3436.0], [24.2, 3438.0], [24.3, 3443.0], [24.4, 3507.0], [24.5, 3535.0], [24.6, 3538.0], [24.7, 3540.0], [24.8, 3543.0], [24.9, 3559.0], [25.0, 3580.0], [25.1, 3586.0], [25.2, 3587.0], [25.3, 3595.0], [25.4, 3604.0], [25.5, 3607.0], [25.6, 3608.0], [25.7, 3618.0], [25.8, 3632.0], [25.9, 3643.0], [26.0, 3643.0], [26.1, 3651.0], [26.2, 3657.0], [26.3, 3687.0], [26.4, 3699.0], [26.5, 3701.0], [26.6, 3707.0], [26.7, 3722.0], [26.8, 3723.0], [26.9, 3727.0], [27.0, 3742.0], [27.1, 3758.0], [27.2, 3763.0], [27.3, 3766.0], [27.4, 3766.0], [27.5, 3778.0], [27.6, 3789.0], [27.7, 3850.0], [27.8, 3852.0], [27.9, 3867.0], [28.0, 3874.0], [28.1, 3889.0], [28.2, 3891.0], [28.3, 3891.0], [28.4, 3906.0], [28.5, 3934.0], [28.6, 3947.0], [28.7, 3953.0], [28.8, 4024.0], [28.9, 4030.0], [29.0, 4043.0], [29.1, 4047.0], [29.2, 4058.0], [29.3, 4110.0], [29.4, 4141.0], [29.5, 4141.0], [29.6, 4144.0], [29.7, 4171.0], [29.8, 4212.0], [29.9, 4213.0], [30.0, 4219.0], [30.1, 4245.0], [30.2, 4252.0], [30.3, 4258.0], [30.4, 4266.0], [30.5, 4271.0], [30.6, 4279.0], [30.7, 4283.0], [30.8, 4302.0], [30.9, 4304.0], [31.0, 4344.0], [31.1, 4349.0], [31.2, 4358.0], [31.3, 4370.0], [31.4, 4380.0], [31.5, 4381.0], [31.6, 4384.0], [31.7, 4391.0], [31.8, 4391.0], [31.9, 4393.0], [32.0, 4428.0], [32.1, 4430.0], [32.2, 4448.0], [32.3, 4456.0], [32.4, 4458.0], [32.5, 4465.0], [32.6, 4465.0], [32.7, 4472.0], [32.8, 4495.0], [32.9, 4495.0], [33.0, 4497.0], [33.1, 4506.0], [33.2, 4506.0], [33.3, 4511.0], [33.4, 4517.0], [33.5, 4520.0], [33.6, 4534.0], [33.7, 4534.0], [33.8, 4536.0], [33.9, 4537.0], [34.0, 4537.0], [34.1, 4539.0], [34.2, 4546.0], [34.3, 4559.0], [34.4, 4598.0], [34.5, 4605.0], [34.6, 4651.0], [34.7, 4665.0], [34.8, 4666.0], [34.9, 4668.0], [35.0, 4674.0], [35.1, 4683.0], [35.2, 4686.0], [35.3, 4697.0], [35.4, 4698.0], [35.5, 4712.0], [35.6, 4716.0], [35.7, 4732.0], [35.8, 4732.0], [35.9, 4737.0], [36.0, 4741.0], [36.1, 4769.0], [36.2, 4776.0], [36.3, 4780.0], [36.4, 4782.0], [36.5, 4797.0], [36.6, 4805.0], [36.7, 4814.0], [36.8, 4818.0], [36.9, 4822.0], [37.0, 4827.0], [37.1, 4846.0], [37.2, 4849.0], [37.3, 4852.0], [37.4, 4871.0], [37.5, 4876.0], [37.6, 4883.0], [37.7, 4916.0], [37.8, 4930.0], [37.9, 4936.0], [38.0, 4949.0], [38.1, 4953.0], [38.2, 4959.0], [38.3, 4964.0], [38.4, 4971.0], [38.5, 4975.0], [38.6, 4989.0], [38.7, 4991.0], [38.8, 5021.0], [38.9, 5024.0], [39.0, 5029.0], [39.1, 5032.0], [39.2, 5053.0], [39.3, 5058.0], [39.4, 5104.0], [39.5, 5105.0], [39.6, 5129.0], [39.7, 5133.0], [39.8, 5134.0], [39.9, 5135.0], [40.0, 5137.0], [40.1, 5142.0], [40.2, 5153.0], [40.3, 5167.0], [40.4, 5171.0], [40.5, 5172.0], [40.6, 5172.0], [40.7, 5184.0], [40.8, 5208.0], [40.9, 5223.0], [41.0, 5223.0], [41.1, 5225.0], [41.2, 5250.0], [41.3, 5251.0], [41.4, 5258.0], [41.5, 5268.0], [41.6, 5269.0], [41.7, 5273.0], [41.8, 5276.0], [41.9, 5300.0], [42.0, 5303.0], [42.1, 5323.0], [42.2, 5325.0], [42.3, 5332.0], [42.4, 5333.0], [42.5, 5336.0], [42.6, 5364.0], [42.7, 5377.0], [42.8, 5414.0], [42.9, 5422.0], [43.0, 5430.0], [43.1, 5445.0], [43.2, 5450.0], [43.3, 5476.0], [43.4, 5480.0], [43.5, 5489.0], [43.6, 5492.0], [43.7, 5494.0], [43.8, 5497.0], [43.9, 5513.0], [44.0, 5517.0], [44.1, 5518.0], [44.2, 5522.0], [44.3, 5536.0], [44.4, 5541.0], [44.5, 5547.0], [44.6, 5554.0], [44.7, 5564.0], [44.8, 5567.0], [44.9, 5567.0], [45.0, 5571.0], [45.1, 5589.0], [45.2, 5598.0], [45.3, 5614.0], [45.4, 5621.0], [45.5, 5655.0], [45.6, 5661.0], [45.7, 5662.0], [45.8, 5664.0], [45.9, 5667.0], [46.0, 5678.0], [46.1, 5688.0], [46.2, 5703.0], [46.3, 5713.0], [46.4, 5726.0], [46.5, 5729.0], [46.6, 5729.0], [46.7, 5731.0], [46.8, 5747.0], [46.9, 5767.0], [47.0, 5770.0], [47.1, 5774.0], [47.2, 5800.0], [47.3, 5801.0], [47.4, 5804.0], [47.5, 5808.0], [47.6, 5811.0], [47.7, 5817.0], [47.8, 5818.0], [47.9, 5845.0], [48.0, 5880.0], [48.1, 5884.0], [48.2, 5902.0], [48.3, 5936.0], [48.4, 5939.0], [48.5, 5943.0], [48.6, 5945.0], [48.7, 5958.0], [48.8, 5968.0], [48.9, 5987.0], [49.0, 5993.0], [49.1, 5995.0], [49.2, 6031.0], [49.3, 6031.0], [49.4, 6039.0], [49.5, 6042.0], [49.6, 6060.0], [49.7, 6064.0], [49.8, 6066.0], [49.9, 6082.0], [50.0, 6082.0], [50.1, 6084.0], [50.2, 6085.0], [50.3, 6095.0], [50.4, 6098.0], [50.5, 6108.0], [50.6, 6143.0], [50.7, 6143.0], [50.8, 6149.0], [50.9, 6158.0], [51.0, 6162.0], [51.1, 6164.0], [51.2, 6170.0], [51.3, 6170.0], [51.4, 6174.0], [51.5, 6195.0], [51.6, 6196.0], [51.7, 6198.0], [51.8, 6199.0], [51.9, 6200.0], [52.0, 6217.0], [52.1, 6222.0], [52.2, 6253.0], [52.3, 6274.0], [52.4, 6277.0], [52.5, 6284.0], [52.6, 6291.0], [52.7, 6304.0], [52.8, 6306.0], [52.9, 6309.0], [53.0, 6314.0], [53.1, 6337.0], [53.2, 6351.0], [53.3, 6355.0], [53.4, 6355.0], [53.5, 6358.0], [53.6, 6395.0], [53.7, 6412.0], [53.8, 6416.0], [53.9, 6419.0], [54.0, 6420.0], [54.1, 6423.0], [54.2, 6426.0], [54.3, 6432.0], [54.4, 6442.0], [54.5, 6450.0], [54.6, 6452.0], [54.7, 6452.0], [54.8, 6456.0], [54.9, 6477.0], [55.0, 6482.0], [55.1, 6493.0], [55.2, 6498.0], [55.3, 6528.0], [55.4, 6537.0], [55.5, 6543.0], [55.6, 6560.0], [55.7, 6560.0], [55.8, 6564.0], [55.9, 6608.0], [56.0, 6611.0], [56.1, 6614.0], [56.2, 6619.0], [56.3, 6623.0], [56.4, 6626.0], [56.5, 6640.0], [56.6, 6656.0], [56.7, 6661.0], [56.8, 6664.0], [56.9, 6666.0], [57.0, 6673.0], [57.1, 6673.0], [57.2, 6673.0], [57.3, 6682.0], [57.4, 6704.0], [57.5, 6707.0], [57.6, 6711.0], [57.7, 6727.0], [57.8, 6731.0], [57.9, 6741.0], [58.0, 6744.0], [58.1, 6747.0], [58.2, 6756.0], [58.3, 6761.0], [58.4, 6771.0], [58.5, 6784.0], [58.6, 6792.0], [58.7, 6799.0], [58.8, 6805.0], [58.9, 6806.0], [59.0, 6817.0], [59.1, 6818.0], [59.2, 6821.0], [59.3, 6828.0], [59.4, 6834.0], [59.5, 6834.0], [59.6, 6848.0], [59.7, 6868.0], [59.8, 6869.0], [59.9, 6889.0], [60.0, 6892.0], [60.1, 6897.0], [60.2, 6912.0], [60.3, 6915.0], [60.4, 6916.0], [60.5, 6928.0], [60.6, 6978.0], [60.7, 6982.0], [60.8, 6982.0], [60.9, 6991.0], [61.0, 7008.0], [61.1, 7024.0], [61.2, 7025.0], [61.3, 7028.0], [61.4, 7038.0], [61.5, 7039.0], [61.6, 7040.0], [61.7, 7046.0], [61.8, 7050.0], [61.9, 7054.0], [62.0, 7076.0], [62.1, 7086.0], [62.2, 7088.0], [62.3, 7101.0], [62.4, 7103.0], [62.5, 7113.0], [62.6, 7126.0], [62.7, 7129.0], [62.8, 7131.0], [62.9, 7137.0], [63.0, 7164.0], [63.1, 7171.0], [63.2, 7174.0], [63.3, 7214.0], [63.4, 7215.0], [63.5, 7230.0], [63.6, 7250.0], [63.7, 7254.0], [63.8, 7267.0], [63.9, 7294.0], [64.0, 7309.0], [64.1, 7314.0], [64.2, 7324.0], [64.3, 7327.0], [64.4, 7340.0], [64.5, 7342.0], [64.6, 7353.0], [64.7, 7356.0], [64.8, 7360.0], [64.9, 7367.0], [65.0, 7384.0], [65.1, 7389.0], [65.2, 7390.0], [65.3, 7391.0], [65.4, 7393.0], [65.5, 7400.0], [65.6, 7405.0], [65.7, 7405.0], [65.8, 7405.0], [65.9, 7406.0], [66.0, 7408.0], [66.1, 7409.0], [66.2, 7414.0], [66.3, 7416.0], [66.4, 7423.0], [66.5, 7439.0], [66.6, 7441.0], [66.7, 7442.0], [66.8, 7442.0], [66.9, 7445.0], [67.0, 7448.0], [67.1, 7456.0], [67.2, 7456.0], [67.3, 7482.0], [67.4, 7495.0], [67.5, 7511.0], [67.6, 7514.0], [67.7, 7527.0], [67.8, 7533.0], [67.9, 7560.0], [68.0, 7564.0], [68.1, 7587.0], [68.2, 7589.0], [68.3, 7594.0], [68.4, 7605.0], [68.5, 7608.0], [68.6, 7609.0], [68.7, 7615.0], [68.8, 7615.0], [68.9, 7626.0], [69.0, 7630.0], [69.1, 7644.0], [69.2, 7664.0], [69.3, 7665.0], [69.4, 7691.0], [69.5, 7692.0], [69.6, 7699.0], [69.7, 7704.0], [69.8, 7712.0], [69.9, 7713.0], [70.0, 7722.0], [70.1, 7736.0], [70.2, 7743.0], [70.3, 7744.0], [70.4, 7747.0], [70.5, 7751.0], [70.6, 7752.0], [70.7, 7769.0], [70.8, 7783.0], [70.9, 7786.0], [71.0, 7793.0], [71.1, 7796.0], [71.2, 7799.0], [71.3, 7809.0], [71.4, 7812.0], [71.5, 7813.0], [71.6, 7816.0], [71.7, 7835.0], [71.8, 7839.0], [71.9, 7840.0], [72.0, 7841.0], [72.1, 7859.0], [72.2, 7878.0], [72.3, 7882.0], [72.4, 7883.0], [72.5, 7884.0], [72.6, 7886.0], [72.7, 7889.0], [72.8, 7891.0], [72.9, 7914.0], [73.0, 7925.0], [73.1, 7928.0], [73.2, 7956.0], [73.3, 7959.0], [73.4, 7982.0], [73.5, 8003.0], [73.6, 8003.0], [73.7, 8021.0], [73.8, 8022.0], [73.9, 8051.0], [74.0, 8052.0], [74.1, 8057.0], [74.2, 8058.0], [74.3, 8077.0], [74.4, 8093.0], [74.5, 8097.0], [74.6, 8102.0], [74.7, 8113.0], [74.8, 8116.0], [74.9, 8132.0], [75.0, 8133.0], [75.1, 8134.0], [75.2, 8141.0], [75.3, 8157.0], [75.4, 8180.0], [75.5, 8187.0], [75.6, 8188.0], [75.7, 8205.0], [75.8, 8205.0], [75.9, 8219.0], [76.0, 8228.0], [76.1, 8245.0], [76.2, 8246.0], [76.3, 8256.0], [76.4, 8280.0], [76.5, 8287.0], [76.6, 8291.0], [76.7, 8292.0], [76.8, 8294.0], [76.9, 8303.0], [77.0, 8311.0], [77.1, 8311.0], [77.2, 8323.0], [77.3, 8327.0], [77.4, 8347.0], [77.5, 8351.0], [77.6, 8352.0], [77.7, 8362.0], [77.8, 8371.0], [77.9, 8382.0], [78.0, 8382.0], [78.1, 8399.0], [78.2, 8401.0], [78.3, 8440.0], [78.4, 8448.0], [78.5, 8452.0], [78.6, 8455.0], [78.7, 8456.0], [78.8, 8464.0], [78.9, 8475.0], [79.0, 8480.0], [79.1, 8481.0], [79.2, 8507.0], [79.3, 8509.0], [79.4, 8524.0], [79.5, 8535.0], [79.6, 8543.0], [79.7, 8547.0], [79.8, 8549.0], [79.9, 8569.0], [80.0, 8578.0], [80.1, 8580.0], [80.2, 8588.0], [80.3, 8595.0], [80.4, 8597.0], [80.5, 8598.0], [80.6, 8599.0], [80.7, 8601.0], [80.8, 8604.0], [80.9, 8609.0], [81.0, 8617.0], [81.1, 8622.0], [81.2, 8627.0], [81.3, 8634.0], [81.4, 8645.0], [81.5, 8647.0], [81.6, 8656.0], [81.7, 8659.0], [81.8, 8673.0], [81.9, 8676.0], [82.0, 8679.0], [82.1, 8680.0], [82.2, 8693.0], [82.3, 8693.0], [82.4, 8696.0], [82.5, 8698.0], [82.6, 8699.0], [82.7, 8711.0], [82.8, 8712.0], [82.9, 8713.0], [83.0, 8718.0], [83.1, 8722.0], [83.2, 8724.0], [83.3, 8726.0], [83.4, 8727.0], [83.5, 8734.0], [83.6, 8743.0], [83.7, 8746.0], [83.8, 8751.0], [83.9, 8757.0], [84.0, 8773.0], [84.1, 8777.0], [84.2, 8781.0], [84.3, 8792.0], [84.4, 8800.0], [84.5, 8808.0], [84.6, 8812.0], [84.7, 8821.0], [84.8, 8822.0], [84.9, 8823.0], [85.0, 8838.0], [85.1, 8841.0], [85.2, 8850.0], [85.3, 8855.0], [85.4, 8857.0], [85.5, 8864.0], [85.6, 8874.0], [85.7, 8877.0], [85.8, 8886.0], [85.9, 8891.0], [86.0, 8895.0], [86.1, 8899.0], [86.2, 8902.0], [86.3, 8921.0], [86.4, 8921.0], [86.5, 8939.0], [86.6, 8951.0], [86.7, 8960.0], [86.8, 8965.0], [86.9, 8996.0], [87.0, 9000.0], [87.1, 9027.0], [87.2, 9035.0], [87.3, 9036.0], [87.4, 9050.0], [87.5, 9053.0], [87.6, 9062.0], [87.7, 9068.0], [87.8, 9080.0], [87.9, 9094.0], [88.0, 9138.0], [88.1, 9142.0], [88.2, 9169.0], [88.3, 9188.0], [88.4, 9189.0], [88.5, 9220.0], [88.6, 9229.0], [88.7, 9237.0], [88.8, 9252.0], [88.9, 9253.0], [89.0, 9257.0], [89.1, 9258.0], [89.2, 9264.0], [89.3, 9280.0], [89.4, 9293.0], [89.5, 9296.0], [89.6, 9297.0], [89.7, 9312.0], [89.8, 9321.0], [89.9, 9328.0], [90.0, 9336.0], [90.1, 9343.0], [90.2, 9352.0], [90.3, 9369.0], [90.4, 9381.0], [90.5, 9383.0], [90.6, 9386.0], [90.7, 9405.0], [90.8, 9407.0], [90.9, 9413.0], [91.0, 9428.0], [91.1, 9440.0], [91.2, 9445.0], [91.3, 9454.0], [91.4, 9456.0], [91.5, 9462.0], [91.6, 9468.0], [91.7, 9500.0], [91.8, 9504.0], [91.9, 9513.0], [92.0, 9513.0], [92.1, 9518.0], [92.2, 9532.0], [92.3, 9575.0], [92.4, 9581.0], [92.5, 9622.0], [92.6, 9632.0], [92.7, 9633.0], [92.8, 9655.0], [92.9, 9675.0], [93.0, 9695.0], [93.1, 9704.0], [93.2, 9735.0], [93.3, 9740.0], [93.4, 9748.0], [93.5, 9762.0], [93.6, 9791.0], [93.7, 9798.0], [93.8, 9802.0], [93.9, 9812.0], [94.0, 9817.0], [94.1, 9818.0], [94.2, 9826.0], [94.3, 9826.0], [94.4, 9833.0], [94.5, 9844.0], [94.6, 9865.0], [94.7, 9876.0], [94.8, 9909.0], [94.9, 9916.0], [95.0, 9919.0], [95.1, 9926.0], [95.2, 9926.0], [95.3, 9944.0], [95.4, 9949.0], [95.5, 9957.0], [95.6, 9959.0], [95.7, 9967.0], [95.8, 9970.0], [95.9, 9977.0], [96.0, 10036.0], [96.1, 10046.0], [96.2, 10050.0], [96.3, 10051.0], [96.4, 10057.0], [96.5, 10057.0], [96.6, 10062.0], [96.7, 10077.0], [96.8, 10096.0], [96.9, 10104.0], [97.0, 10110.0], [97.1, 10112.0], [97.2, 10114.0], [97.3, 10118.0], [97.4, 10144.0], [97.5, 10146.0], [97.6, 10166.0], [97.7, 10168.0], [97.8, 10192.0], [97.9, 10193.0], [98.0, 10210.0], [98.1, 10211.0], [98.2, 10223.0], [98.3, 10229.0], [98.4, 10258.0], [98.5, 10286.0], [98.6, 10292.0], [98.7, 10307.0], [98.8, 10316.0], [98.9, 10335.0], [99.0, 10337.0], [99.1, 10357.0], [99.2, 10365.0], [99.3, 10373.0], [99.4, 10378.0], [99.5, 10408.0], [99.6, 10418.0], [99.7, 10464.0], [99.8, 10487.0], [99.9, 10989.0]], "isOverall": false, "label": "loginPage", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 23.0, "series": [{"data": [[1000.0, 1.0], [1300.0, 7.0], [1400.0, 8.0], [1500.0, 11.0], [1600.0, 8.0], [1700.0, 8.0], [1800.0, 9.0], [1900.0, 11.0], [2000.0, 23.0], [2100.0, 23.0], [2200.0, 23.0], [2300.0, 6.0], [2400.0, 15.0], [2500.0, 10.0], [2600.0, 4.0], [2800.0, 12.0], [2700.0, 12.0], [2900.0, 4.0], [3000.0, 11.0], [3100.0, 12.0], [3300.0, 8.0], [3200.0, 11.0], [3400.0, 6.0], [3500.0, 10.0], [3700.0, 12.0], [3600.0, 11.0], [3800.0, 7.0], [3900.0, 4.0], [4000.0, 5.0], [4300.0, 12.0], [4100.0, 5.0], [4200.0, 10.0], [4400.0, 11.0], [4500.0, 14.0], [4600.0, 10.0], [4700.0, 11.0], [4800.0, 11.0], [4900.0, 11.0], [5000.0, 6.0], [5100.0, 14.0], [5200.0, 11.0], [5300.0, 9.0], [5500.0, 14.0], [5400.0, 11.0], [5600.0, 9.0], [5800.0, 10.0], [5700.0, 10.0], [6100.0, 14.0], [5900.0, 10.0], [6000.0, 13.0], [6200.0, 8.0], [6300.0, 10.0], [6400.0, 16.0], [6500.0, 6.0], [6600.0, 15.0], [6900.0, 8.0], [6700.0, 14.0], [6800.0, 14.0], [7000.0, 13.0], [7100.0, 10.0], [7400.0, 20.0], [7200.0, 7.0], [7300.0, 15.0], [7500.0, 9.0], [7600.0, 13.0], [7700.0, 16.0], [7800.0, 16.0], [7900.0, 6.0], [8000.0, 11.0], [8100.0, 12.0], [8400.0, 10.0], [8300.0, 13.0], [8200.0, 12.0], [8600.0, 20.0], [8700.0, 17.0], [8500.0, 15.0], [8800.0, 18.0], [8900.0, 8.0], [9000.0, 10.0], [9100.0, 5.0], [9200.0, 12.0], [9300.0, 10.0], [9500.0, 8.0], [9400.0, 10.0], [9600.0, 6.0], [9700.0, 7.0], [10200.0, 7.0], [10000.0, 9.0], [9900.0, 12.0], [9800.0, 10.0], [10100.0, 11.0], [10300.0, 8.0], [10400.0, 4.0], [10900.0, 1.0]], "isOverall": false, "label": "loginPage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 984.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 984.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 401.5629999999995, "minX": 1.62452886E12, "maxY": 401.5629999999995, "series": [{"data": [[1.62452886E12, 401.5629999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62452886E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1347.0, "minX": 1.0, "maxY": 10989.0, "series": [{"data": [[2.0, 10258.0], [3.0, 10166.0], [4.0, 10168.0], [6.0, 10167.5], [7.0, 10335.0], [8.0, 10487.0], [9.0, 10464.0], [10.0, 10144.0], [11.0, 10192.0], [14.0, 10365.0], [16.0, 10283.25], [17.0, 10057.0], [18.0, 10418.0], [20.0, 9919.0], [23.0, 10170.666666666666], [24.0, 10146.0], [26.0, 10321.5], [27.0, 10104.0], [28.0, 10337.0], [30.0, 10066.5], [31.0, 10051.0], [33.0, 10210.0], [32.0, 9970.0], [35.0, 9926.0], [34.0, 10114.0], [37.0, 9817.0], [36.0, 9967.0], [39.0, 9735.0], [38.0, 10050.0], [41.0, 9675.0], [40.0, 10193.0], [43.0, 10316.0], [42.0, 10110.0], [45.0, 10211.0], [44.0, 9876.0], [47.0, 9655.0], [46.0, 10057.0], [49.0, 9865.0], [48.0, 9944.0], [51.0, 9909.0], [50.0, 9919.0], [53.0, 9812.0], [52.0, 9581.0], [55.0, 10036.5], [57.0, 9826.0], [56.0, 9454.0], [59.0, 9462.0], [58.0, 9957.0], [61.0, 9791.0], [60.0, 9513.0], [62.0, 9762.0], [67.0, 9445.0], [66.0, 9844.0], [65.0, 9913.666666666666], [71.0, 9532.0], [70.0, 9748.0], [69.0, 9818.0], [68.0, 9633.0], [75.0, 9381.0], [74.0, 9440.0], [73.0, 9926.0], [72.0, 9328.0], [79.0, 9632.0], [78.0, 9622.0], [77.0, 9798.0], [76.0, 9293.0], [83.0, 9916.0], [82.0, 9257.0], [81.0, 9558.5], [87.0, 9740.0], [86.0, 9504.0], [85.0, 9407.0], [84.0, 10046.0], [91.0, 9468.0], [90.0, 9094.0], [89.0, 9405.0], [88.0, 9229.0], [95.0, 9383.0], [94.0, 9062.0], [93.0, 9343.0], [92.0, 10292.0], [99.0, 9027.0], [98.0, 8886.0], [97.0, 9220.0], [96.0, 9695.0], [103.0, 8921.0], [102.0, 8945.5], [100.0, 9352.0], [107.0, 9336.0], [106.0, 9428.0], [105.0, 8899.0], [104.0, 9513.0], [111.0, 8921.0], [110.0, 8818.0], [108.0, 9000.0], [115.0, 9035.0], [114.0, 9369.0], [113.0, 8792.0], [112.0, 9456.0], [119.0, 8808.0], [118.0, 9500.0], [117.0, 9518.0], [116.0, 9575.0], [123.0, 9253.0], [122.0, 9169.0], [121.0, 9321.0], [120.0, 8773.0], [126.0, 8874.0], [125.0, 8599.0], [124.0, 8617.0], [135.0, 9296.0], [134.0, 8718.0], [133.0, 8699.0], [132.0, 9312.0], [131.0, 9138.0], [130.0, 9258.0], [129.0, 8549.0], [128.0, 9003.0], [143.0, 8604.0], [142.0, 9142.0], [141.0, 8580.0], [140.0, 9237.0], [139.0, 8891.0], [138.0, 9080.0], [137.0, 8645.0], [136.0, 9252.0], [151.0, 8475.0], [150.0, 9189.0], [149.0, 9036.0], [148.0, 9264.0], [147.0, 8347.0], [146.0, 8524.0], [145.0, 8656.0], [144.0, 8362.0], [159.0, 8960.0], [158.0, 8219.0], [157.0, 9297.0], [156.0, 9050.0], [155.0, 8777.0], [154.0, 9068.0], [153.0, 8965.0], [152.0, 8939.0], [167.0, 8822.0], [166.0, 9188.0], [165.0, 8841.0], [164.0, 9386.0], [163.0, 8821.0], [162.0, 8673.0], [161.0, 8800.0], [160.0, 8351.0], [175.0, 8693.0], [174.0, 8601.0], [173.0, 8864.0], [172.0, 8727.0], [171.0, 8676.0], [170.0, 8757.0], [169.0, 8513.0], [183.0, 8812.0], [182.0, 8712.0], [181.0, 8598.0], [180.0, 8722.0], [179.0, 8287.0], [178.0, 8680.0], [177.0, 8857.0], [176.0, 8838.0], [191.0, 8535.0], [190.0, 8659.0], [189.0, 8588.0], [188.0, 8852.5], [184.0, 8679.0], [198.0, 8743.0], [197.0, 8597.0], [196.0, 8509.0], [195.0, 8543.0], [194.0, 8850.0], [193.0, 8698.0], [192.0, 8951.0], [207.0, 8713.0], [206.0, 8609.0], [205.0, 8696.0], [204.0, 8735.0], [202.0, 8627.0], [201.0, 8547.0], [200.0, 8651.5], [215.0, 8382.0], [214.0, 8440.0], [213.0, 8634.0], [212.0, 8456.0], [211.0, 8452.0], [210.0, 8507.0], [209.0, 8382.0], [208.0, 8595.0], [223.0, 8311.0], [222.0, 8399.0], [221.0, 8228.0], [220.0, 8294.0], [219.0, 8481.0], [218.0, 8245.0], [217.0, 8711.0], [216.0, 8371.0], [231.0, 7928.0], [230.0, 8113.0], [229.0, 8311.0], [228.0, 8464.0], [227.0, 8303.0], [226.0, 8448.0], [225.0, 8157.0], [224.0, 8480.0], [233.0, 4912.0], [239.0, 8724.0], [238.0, 8622.0], [237.0, 8256.0], [236.0, 8292.0], [235.0, 8102.0], [234.0, 8205.0], [232.0, 8205.0], [247.0, 8134.0], [246.0, 8187.0], [245.0, 7959.0], [244.0, 8193.0], [243.0, 8401.0], [242.0, 8188.0], [241.0, 8246.0], [240.0, 8693.0], [255.0, 8052.0], [254.0, 8133.0], [253.0, 8093.0], [252.0, 8051.0], [251.0, 8291.0], [250.0, 8003.0], [249.0, 8190.0], [270.0, 7830.666666666667], [261.0, 4744.5], [271.0, 4665.5], [267.0, 8077.0], [266.0, 7875.0], [264.0, 7859.0], [263.0, 7769.0], [257.0, 8221.5], [259.0, 8097.0], [258.0, 7783.0], [262.0, 8352.0], [260.0, 7665.0], [286.0, 7883.0], [281.0, 4686.5], [283.0, 4546.5], [287.0, 8132.0], [285.0, 7914.0], [284.0, 8058.0], [282.0, 7891.0], [280.0, 7594.0], [279.0, 7886.0], [273.0, 7813.0], [272.0, 8141.0], [275.0, 7925.0], [274.0, 7878.0], [278.0, 7840.0], [277.0, 7692.0], [276.0, 7884.0], [300.0, 3530.6666666666665], [289.0, 4741.0], [290.0, 1347.0], [291.0, 7572.0], [292.0, 4641.0], [293.0, 7841.0], [295.0, 7713.0], [288.0, 7839.0], [294.0, 7752.0], [303.0, 3515.0], [297.0, 7720.0], [302.0, 7609.0], [301.0, 7889.0], [299.0, 7405.0], [298.0, 7615.0], [316.0, 4495.0], [308.0, 2986.0], [309.0, 3528.0], [310.0, 3572.666666666667], [311.0, 7799.0], [307.0, 7560.0], [306.0, 7816.0], [305.0, 7691.0], [304.0, 7796.0], [314.0, 4515.5], [315.0, 4667.0], [319.0, 7712.0], [313.0, 7360.0], [312.0, 7704.0], [318.0, 7384.0], [317.0, 7416.0], [332.0, 4460.5], [320.0, 4603.0], [321.0, 4571.0], [323.0, 7400.0], [322.0, 7786.0], [327.0, 4559.5], [326.0, 7441.0], [325.0, 7564.0], [324.0, 7644.0], [330.0, 4563.5], [329.0, 7882.0], [328.0, 7342.0], [334.0, 4596.0], [335.0, 7215.0], [333.0, 7164.0], [331.0, 7722.0], [350.0, 4618.5], [351.0, 3149.0], [348.0, 1612.0], [349.0, 7284.0], [347.0, 7495.0], [346.0, 7405.0], [345.0, 7391.0], [344.0, 7423.0], [343.0, 7482.0], [337.0, 7439.0], [336.0, 7309.0], [339.0, 7137.0], [338.0, 7664.0], [342.0, 7527.0], [341.0, 7408.0], [340.0, 7214.0], [364.0, 1770.3333333333333], [352.0, 4460.5], [353.0, 3091.75], [354.0, 4561.0], [355.0, 7267.0], [356.0, 5163.0], [357.0, 7353.0], [359.0, 7220.5], [363.0, 4282.0], [362.0, 7038.0], [361.0, 7294.0], [360.0, 7390.0], [367.0, 7533.0], [366.0, 7389.0], [365.0, 7308.5], [380.0, 4334.0], [368.0, 4556.5], [371.0, 3662.333333333333], [370.0, 6834.0], [369.0, 6834.0], [374.0, 3286.75], [373.0, 7250.0], [372.0, 7327.0], [378.0, 3699.0], [379.0, 7131.0], [377.0, 4653.0], [376.0, 4538.0], [381.0, 4225.0], [382.0, 6761.0], [383.0, 6869.0], [399.0, 6666.0], [388.0, 3564.666666666667], [392.0, 2932.8], [393.0, 7171.0], [389.0, 4404.0], [394.0, 3752.0], [395.0, 3642.333333333333], [398.0, 7129.0], [397.0, 6916.0], [396.0, 6889.0], [387.0, 6982.0], [386.0, 7126.0], [385.0, 7024.0], [384.0, 7230.0], [391.0, 7008.0], [390.0, 6560.0], [414.0, 6744.0], [400.0, 4520.0], [406.0, 6640.0], [405.0, 7039.0], [404.0, 6915.0], [401.0, 4374.5], [415.0, 4503.0], [413.0, 6673.0], [412.0, 6482.0], [403.0, 6711.0], [402.0, 7456.0], [411.0, 6727.0], [410.0, 6747.0], [409.0, 6756.0], [408.0, 6811.5], [429.0, 2662.1111111111113], [417.0, 3199.75], [416.0, 4624.5], [418.0, 4447.5], [428.0, 3730.666666666667], [422.0, 4452.0], [421.0, 6629.0], [423.0, 6560.0], [424.0, 3032.0], [425.0, 3104.6], [426.0, 3218.75], [427.0, 2834.0], [430.0, 3423.0], [431.0, 7050.0], [432.0, 4365.5], [433.0, 3057.8], [437.0, 2807.0], [436.0, 3765.666666666667], [435.0, 3699.666666666667], [444.0, 6416.0], [434.0, 4514.5], [439.0, 3791.333333333333], [438.0, 4498.0], [446.0, 4370.0], [447.0, 6355.0], [443.0, 6432.0], [442.0, 6395.0], [441.0, 6611.0], [440.0, 6452.0], [445.0, 4323.0], [461.0, 6423.0], [450.0, 4527.0], [451.0, 4433.0], [453.0, 3049.8], [452.0, 6358.0], [455.0, 6784.0], [449.0, 6661.0], [448.0, 6412.0], [454.0, 6868.0], [456.0, 2274.0], [459.0, 3282.5], [462.0, 6452.0], [460.0, 6623.0], [458.0, 6291.0], [457.0, 6446.0], [477.0, 6351.0], [464.0, 4843.0], [469.0, 4184.5], [468.0, 6458.5], [471.0, 6426.0], [478.0, 4291.0], [476.0, 6217.0], [466.0, 6277.0], [465.0, 6741.0], [475.0, 6420.0], [474.0, 6442.0], [473.0, 6143.0], [472.0, 6174.0], [493.0, 4181.5], [489.0, 2413.0], [490.0, 4955.0], [492.0, 4273.75], [483.0, 6149.0], [482.0, 6066.0], [481.0, 6991.0], [480.0, 6334.0], [494.0, 4429.0], [495.0, 6095.0], [488.0, 6072.5], [486.0, 6477.0], [485.0, 6304.0], [484.0, 6098.0], [497.0, 2467.6], [496.0, 2454.0], [506.0, 4239.75], [510.0, 4177.0], [511.0, 5902.0], [509.0, 6119.5], [499.0, 6103.75], [507.0, 5995.0], [504.0, 6082.0], [503.0, 6164.0], [502.0, 5743.5], [500.0, 6198.0], [537.0, 4418.5], [512.0, 4153.0], [527.0, 5945.0], [526.0, 5497.0], [525.0, 6426.0], [524.0, 6199.0], [523.0, 5489.0], [522.0, 5767.0], [521.0, 5729.0], [520.0, 5880.0], [513.0, 2519.5], [518.0, 3610.333333333333], [517.0, 5661.0], [516.0, 5937.0], [514.0, 6031.0], [536.0, 5517.0], [519.0, 6108.0], [529.0, 4270.5], [530.0, 3737.0], [532.0, 5621.0], [531.0, 5801.0], [533.0, 4137.0], [535.0, 5811.0], [543.0, 5547.0], [528.0, 5726.0], [542.0, 5494.0], [541.0, 5492.0], [540.0, 5884.0], [539.0, 5731.0], [538.0, 5422.0], [571.0, 3966.5], [575.0, 5364.0], [545.0, 4248.5], [544.0, 5571.0], [546.0, 5845.0], [548.0, 5747.0], [547.0, 5662.0], [550.0, 5377.0], [549.0, 5703.0], [559.0, 5567.0], [558.0, 5664.0], [557.0, 5522.0], [556.0, 5564.0], [555.0, 5414.0], [554.0, 5541.0], [553.0, 5276.0], [552.0, 5536.0], [551.0, 3775.3333333333335], [563.0, 3470.0], [562.0, 5958.0], [561.0, 5268.0], [560.0, 5598.0], [564.0, 4095.0], [565.0, 3327.4], [566.0, 3332.8], [567.0, 5729.0], [570.0, 5325.0], [569.0, 5445.0], [568.0, 5223.0], [572.0, 5258.0], [574.0, 6162.0], [573.0, 5614.0], [581.0, 4292.5], [579.0, 4142.5], [580.0, 5480.0], [578.0, 3580.75], [577.0, 3989.0], [576.0, 5323.0], [582.0, 3967.0], [583.0, 5184.0], [602.0, 5167.0], [601.0, 5123.0], [589.0, 4201.0], [588.0, 5135.0], [587.0, 5251.0], [586.0, 5513.0], [585.0, 5589.0], [584.0, 5137.0], [590.0, 5133.0], [591.0, 5300.0], [597.0, 4148.0], [596.0, 5058.0], [595.0, 5333.0], [594.0, 5172.0], [593.0, 5129.0], [592.0, 5134.0], [599.0, 5336.0], [598.0, 5032.0], [603.0, 4143.0], [606.0, 3988.0], [605.0, 4964.0], [604.0, 5250.0], [607.0, 5208.0], [615.0, 3961.0], [623.0, 3998.0], [613.0, 3765.6], [612.0, 3072.0], [611.0, 5142.0], [610.0, 4936.0], [609.0, 5273.0], [608.0, 5029.0], [627.0, 3574.0], [628.0, 3161.0], [631.0, 4769.0], [630.0, 5143.0], [626.0, 3561.0], [624.0, 3918.0], [633.0, 3758.3333333333335], [634.0, 3918.5], [635.0, 4849.0], [637.0, 3974.5], [639.0, 3890.5], [638.0, 4737.0], [636.0, 3952.0], [632.0, 3967.0], [625.0, 3623.0], [614.0, 3990.0], [617.0, 4096.5], [616.0, 5171.0], [618.0, 3948.0], [619.0, 3950.5], [620.0, 4953.0], [622.0, 4153.5], [621.0, 4876.0], [664.0, 3972.0], [643.0, 3720.0], [645.0, 3586.0], [644.0, 4534.0], [647.0, 4822.0], [646.0, 4697.0], [649.0, 3400.0], [648.0, 4814.0], [650.0, 4633.0], [652.0, 3923.0], [655.0, 4674.0], [640.0, 4827.0], [642.0, 4559.0], [641.0, 4506.0], [654.0, 4601.0], [651.0, 4032.5], [659.0, 3917.0], [658.0, 4651.0], [657.0, 4495.0], [656.0, 4782.0], [661.0, 4520.0], [660.0, 4428.0], [663.0, 4517.0], [662.0, 4712.0], [670.0, 3864.5], [669.0, 4971.0], [668.0, 4456.0], [671.0, 4271.0], [665.0, 4022.0], [666.0, 3645.0], [667.0, 3717.6666666666665], [697.0, 4141.0], [701.0, 4016.0], [683.0, 4078.5], [682.0, 4393.0], [681.0, 4472.0], [680.0, 4797.0], [684.0, 4495.0], [686.0, 4448.0], [685.0, 4344.0], [696.0, 4304.0], [679.0, 4539.0], [678.0, 4534.0], [677.0, 4266.0], [676.0, 4546.0], [675.0, 4465.0], [674.0, 4497.0], [673.0, 4733.0], [687.0, 4144.0], [692.0, 3831.0], [694.0, 3936.5], [693.0, 4380.0], [695.0, 4370.0], [703.0, 4321.5], [689.0, 4511.0], [688.0, 4213.0], [691.0, 4245.0], [690.0, 4358.0], [700.0, 4219.0], [699.0, 4279.0], [698.0, 4171.0], [728.0, 3704.5], [721.0, 3587.5], [709.0, 3699.0], [710.0, 3805.3333333333335], [711.0, 4110.0], [732.0, 3773.6666666666665], [730.0, 3643.0], [729.0, 3766.0], [733.0, 3701.0], [734.0, 3641.0], [735.0, 3699.0], [720.0, 3934.0], [715.0, 3645.3333333333335], [714.0, 3947.0], [713.0, 4047.0], [712.0, 4349.0], [716.0, 3852.0], [719.0, 3656.8333333333335], [708.0, 4058.0], [707.0, 4258.0], [706.0, 4043.0], [705.0, 4024.0], [704.0, 4381.0], [718.0, 3889.0], [717.0, 3728.0], [722.0, 3741.0], [724.0, 3535.0], [725.0, 3776.0], [727.0, 3661.0], [726.0, 3707.0], [723.0, 3671.0], [736.0, 3643.0], [1.0, 10989.0]], "isOverall": false, "label": "loginPage", "isController": false}, {"data": [[401.5629999999995, 5891.960000000005]], "isOverall": false, "label": "loginPage-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 736.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2250.0, "minX": 1.62452886E12, "maxY": 300300.0, "series": [{"data": [[1.62452886E12, 300300.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62452886E12, 2250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62452886E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5891.960000000005, "minX": 1.62452886E12, "maxY": 5891.960000000005, "series": [{"data": [[1.62452886E12, 5891.960000000005]], "isOverall": false, "label": "loginPage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62452886E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5891.905000000005, "minX": 1.62452886E12, "maxY": 5891.905000000005, "series": [{"data": [[1.62452886E12, 5891.905000000005]], "isOverall": false, "label": "loginPage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62452886E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4578.9810000000025, "minX": 1.62452886E12, "maxY": 4578.9810000000025, "series": [{"data": [[1.62452886E12, 4578.9810000000025]], "isOverall": false, "label": "loginPage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62452886E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1073.0, "minX": 1.62452886E12, "maxY": 10989.0, "series": [{"data": [[1.62452886E12, 10989.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62452886E12, 9335.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62452886E12, 10336.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62452886E12, 9918.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62452886E12, 1073.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62452886E12, 6083.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62452886E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1561.5, "minX": 1.0, "maxY": 10989.0, "series": [{"data": [[42.0, 1561.5], [54.0, 4141.0], [56.0, 2687.0], [1.0, 10989.0], [69.0, 5030.5], [68.0, 8591.5], [73.0, 3311.0], [75.0, 6673.0], [74.0, 7354.5], [77.0, 6064.0], [78.0, 7880.5], [83.0, 9027.0], [85.0, 9957.0], [96.0, 2130.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 96.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1561.5, "minX": 1.0, "maxY": 10989.0, "series": [{"data": [[42.0, 1561.5], [54.0, 4141.0], [56.0, 2687.0], [1.0, 10989.0], [69.0, 5030.5], [68.0, 8591.0], [73.0, 3311.0], [75.0, 6673.0], [74.0, 7354.5], [77.0, 6064.0], [78.0, 7880.5], [83.0, 9027.0], [85.0, 9957.0], [96.0, 2130.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 96.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62452886E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62452886E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62452886E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62452886E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62452886E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62452886E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62452886E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62452886E12, 16.666666666666668]], "isOverall": false, "label": "loginPage-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62452886E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.62452886E12, "maxY": 16.666666666666668, "series": [{"data": [[1.62452886E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62452886E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

